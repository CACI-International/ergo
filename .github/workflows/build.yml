name: 'Build, test, and deploy ergo'
on:
  push:
    branches:
      - main
  pull_request:

# This allows a subsequently queued workflow run to interrupt previous runs
concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  build:
    name: "Build for ${{ matrix.target.target }} - Rust ${{ matrix.rust-version }}"
    runs-on: ${{ matrix.target.os }}

    strategy:
      matrix:
        rust-version: [stable]
        target:
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: true
            test-package: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            cross: true
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            cross: true
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
            test-package: true
        # Also test the minimum version 1.64
        include:
          - rust-version: 1.64
            target:
              os: ubuntu-latest
              target: x86_64-unknown-linux-gnu
              test-package: true
          - rust-version: 1.64
            target:
              os: macos-latest
              target: x86_64-apple-darwin
              test-package: true

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install rust
        run: |
          rustup install ${{ matrix.rust-version }}
          rustup default ${{ matrix.rust-version }}

      - name: Add rust target
        run: rustup target add ${{ matrix.target.target }}
        if: ${{ !matrix.target.cross }}

      - name: Cache
        uses: actions/cache@v3
        if: ${{ github.ref != 'ref/tags/*' }}
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
            .ergo_work
          key: ${{ matrix.target.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross
        if: ${{ matrix.target.cross }}

      - name: Bootstrap ergo
        run: ./bootstrap.sh

      - name: Test ergo (bootstrap)
        run: dist/bin/ergolang evaluate test

      - name: Build ergo (release)
        run: |
          [[ "${{ matrix.target.cross }}" = "true" ]] && FLAGS=--cross || FLAGS=
          dist/bin/ergolang evaluate package --target=${{ matrix.target.target }} $FLAGS

      - name: Test ergo (release)
        run: |
          ./ergo-*.run install `pwd`/test-install
          test-install/bin/ergo test
        if: ${{ matrix.target.test-package }}

      - name: Upload installer
        if: ${{ matrix.rust-version == 'stable' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target.target }}
          path: ergo-*.run

      - name: Deploy installer
        if: ${{ matrix.rust-version == 'stable' && github.ref == 'ref/tags/*' }}
        uses: svenstaro/upload-release-action@v2
        with:
          file: ergo-*.run
          file_glob: true
          overwrite: true

  docker:
    name: "Docker build - ${{ matrix.target.target }} ${{ matrix.target.image }}"
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        target:
          - image: debian
            tag: bullseye
            abi: gnu
          - image: debian
            tag: bullseye-slim
            abi: gnu
          - image: debian
            tag: bookworm
            abi: gnu
          - image: debian
            tag: bookworm-slim
            abi: gnu

    env:
      dockerfile: 'docker/Dockerfile.${{ matrix.target.image }}'
      build_args: 'TAG=${{ matrix.target.tag }}'
      platforms: linux/amd64,linux/arm64/v8
      test_tag: 'ergo-${{ matrix.target.tag }}:test'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download the installer (aarch64)
        uses: actions/download-artifact@v3
        with:
          name: aarch64-unknown-linux-${{ matrix.target.abi }}

      - name: Download the installer (x86_64)
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-${{ matrix.target.abi }}

      - name: Adjust installer filenames
        run: |
          mv ergo-*-aarch64-unknown-linux-${{ matrix.target.abi }}.run docker/ergo-arm64.run
          mv ergo-*-x86_64-unknown-linux-${{ matrix.target.abi }}.run docker/ergo-amd64.run

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: docker
          file: ${{ env.dockerfile }}
          build-args: ${{ env.build_args }}
          platforms: ${{ env.platforms }}

      - name: Load Docker image
        uses: docker/build-push-action@v4
        with:
          context: docker
          file: ${{ env.dockerfile }}
          build-args: ${{ env.build_args }}
          platforms: linux/amd64
          load: true
          tags: ${{ env.test_tag }}

      - name: Test Docker image
        run: docker run --rm $test_tag ergo -d std

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ergolang/ergo
          flavor: |
            latest=false
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') && matrix.target.tag == 'bullseye' }}
            type=pep440,pattern=${{ matrix.target.tag }}
            type=pep440,pattern={{version}}-${{ matrix.target.tag }}
            type=pep440,pattern={{major}}-${{ matrix.target.tag }}-${{ matrix.target.tag }}
            type=pep440,pattern={{major}}.{{minor}}-${{ matrix.target.tag }}

      - name: Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: docker
          file: ${{ env.dockerfile }}
          build-args: ${{ env.build_args }}
          platforms: ${{ env.platforms }}
          push: ${{ github.ref == 'ref/tags/*' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
