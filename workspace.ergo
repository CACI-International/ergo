## The minimum rust version to support.
rust-version = 1.64.0

std:import { :Bool, :Function, :Iter, :Path, :String, :env, :exec, :fs, :if, :io, :match, :task } = $std

run-task = fn :name ~:stdin ^:args -> task $name {
    child = exec (env = { PATH = env:vars:PATH }) ^args
    if $stdin {
        child:stdin $stdin
        child:stdin ()
    }
    child:success
}

*term* = std:sync:resource terminal 1

script-dir = std:source:dir ()

linux-release = {
    docker-image = "centos:7"
    docker-artifacts = target-docker

    docker-build = {
        run-task "updating docker image" docker pull $docker-image
        run-task "compiling in release mode" docker run --rm -t -v "$script-dir:/host" $docker-image sh -c '
            ' cd /host
            ' yum install -y gcc
            ' curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal
            ' ~/.cargo/bin/rustup install $rust-version
            ' ~/.cargo/bin/cargo +$rust-version build --release --target-dir $docker-artifacts
    }

    out-dir = { $docker-build; Path:join $script-dir $docker-artifacts release }

    {
        binary = { Path:join $out-dir ergolang }
        stdlib = { Path:join $out-dir libergo_std.so }
    }
}

mac-release = {
    remote = std:Error:new "no remote mac server"
    remote-dir = /ergo_remote_build/ergo/
    file-list = exec ~pwd=$script-dir git ls-files -co --exclude-standard |>:stdout
    remote-endpoint = "$remote:$remote-dir"
    result-files = String:join "\n" [target/release/ergolang,target/release/libergo_std.dylib]

    remote-ssh-args = [-o, "ControlPath=~/.ssh/%C", -o, "ControlMaster=auto", -o, "ControlPersist=1h"]
    rsync-ssh = String:join " " ["ssh",^remote-ssh-args]

    connect-remote = std:sync:consume $*term* {
        # ssh reads/writes /dev/tty directly for password, so we don't pipe stdin and retain the terminal
        cmd = exec ssh ~retain-terminal ^remote-ssh-args $remote true
        [io:stdout cmd:stdout, io:stderr cmd:stderr]
        ()
    }

    remotely = fn ~:no-dir :description :cmd ^:args -> {
        cmd-str = String:join " " <| Iter:flatten [[$cmd],Iter:map (fn :e -> "\"$e\"") args:positional]
        change-dir = if $no-dir "" else "cd $remote-dir;"
        run-task "mac remote: $description" ssh ^remote-ssh-args $remote "exec $$SHELL -l -c '$change-dir $cmd-str'"
    }

    target-dir = remotely ~no-dir "create remote destination" mkdir -p $remote-dir
    # Note: rsync --delete _does not_ delete files that aren't in the file list. This is really
    # inconvenient behavior, but it's very annoying to workaround (with `--include-list` and
    # `--exclude`); we may just want to change this to always delete all target files, as
    # dissatisfying as that is.
    transfer-files = run-task "transferring to remote" ~stdin=$file-list rsync -e $rsync-ssh -az "--files-from=-" --delete $script-dir $remote-endpoint
    install-rust = remotely "updating rust toolchain" rustup install $rust-version
    run-build = remotely "compiling in release mode" cargo "+$rust-version" build --release
    local-files = Path:for <| fn :local-files -> {
        run-task "retrieving files" (stdin = $result-files) rsync -e $rsync-ssh -az "--files-from=-" $remote-endpoint $local-files
    }

    build = { $connect-remote, $target-dir, $transfer-files, $install-rust, $run-build, $local-files }
    {
        binary = { $build, Path:join $local-files target release ergolang }
        stdlib = { $build, Path:join $local-files target release libergo_std.dylib }
    }
}

version = exec git describe --always --tags | String:from | String:trim
name = "ergo-$version"

package = fn :os :files -> {
    name = "$(name)-$os"

    installer-entry = '
       ' #!/bin/sh
       ' 
       ' set -eu
       ' 
       ' target=linux
       ' if [ "$$(uname)" = "Darwin" ]; then
       '     target=mac
       ' fi
       ' 
       ' cmd=$${1:-}
       ' shift
       ' 
       ' usage() {
       '     echo "Usage: installer COMMAND"
       '     echo
       '     echo "Commands:"
       '     echo "  ergo [args...] - run ergo without installing anything"
       '     echo "  install [dir] - install ergo to the given directory, defaulting to $$HOME/.local"
       '     echo "  uninstall [dir] - uninstall ergo from the given directory, defaulting to $$HOME/.local"
       '     echo "  help - display this help text"
       '     echo
       '     echo "  For a system-wide install, run e.g. 'install /usr'."
       ' }
       ' 
       ' install() {
       '     dir=$$1
       '     mkdir -p $$dir/{bin,lib}
       '     cp -r ./bin/* $$dir/bin
       '     cp -r ./lib/* $$dir/lib
       '     ln -s ergolang $$dir/bin/ergo
       '     ln -s ergolang $$dir/bin/ergofmt
       ' 
       '     echo "ergo installed to $$dir/bin; ensure it is in your PATH"
       '     if [ "$$target" = "mac" ]; then
       '         xattr -dr com.apple.quarantine $$dir/lib/ergo
       '     fi
       ' }
       ' 
       ' uninstall() {
       '     dir=$$1
       '     rm -f $$dir/bin/{ergolang,ergo,ergofmt}
       '     rm -rf $$dir/lib/ergo
       ' }
       ' 
       ' case $$cmd in
       '     help)
       '         usage
       '         ;;
       '     ergo)
       '         exec ./bin/ergolang evaluate "$$@"
       '         ;;
       '     install)
       '         dir=$${1:-$$HOME/.local}
       '         uninstall $$dir
       '         install $$dir
       '         ;;
       '     uninstall)
       '         dir=$${1:-$$HOME/.local}
       '         uninstall $$dir
       '         ;;
       '     *)
       '         echo "unrecognized command: $$cmd"
       '         usage
       '         exit 1
       '         ;;
       ' esac

    dist = Path:owned <| Path:for <| fn :dist -> {
        # make directories
        [
            fs:create-dir <| Path:join $dist bin
            fs:create-dir <| Path:join $dist lib ergo
        ]
        # create/copy files
        [
            fs:copy files:binary (Path:join $dist bin ergolang)
            {
                fs:copy (Path:join $script-dir ergo_std/script) (Path:join $dist lib ergo std)
                fs:copy files:stdlib (Path:join $dist lib ergo std plugin.ergo)
            }
            fs:write (Path:join $dist entry.sh) $installer-entry
        ]
    }
    makeself = std:cache <| std:Path:for <| fn :f -> {
        std:fs:create-dir $f
        std:net:download "https://github.com/megastep/makeself/releases/download/release-2.4.5/makeself-2.4.5.run" (Path:join $f makeself.run)
        exec ~pwd=$f (env:path-search sh) makeself.run --target .
    }
    makeself = Path:join $makeself makeself.sh

    filename = "$name.run"

    outdir = Path:for <| fn :outdir -> {
        fs:remove $outdir
        fs:create-dir $outdir
        task "creating $os installer" {
            exec ~pwd=$outdir (env:path-search sh) $makeself $dist $filename "ergo $version" sh ./entry.sh
            ()
        }
    }

    {
        path = Path:join $outdir $filename
        filename
    }
}

linux-package = package linux $linux-release
mac-package = package mac $mac-release

remote-deploy = std:Error:new "no remote deploy server"
remote-docs = std:Error:new "no remote docs server"

deploy = fn :package -> {
    target = "$remote-deploy/$(package:filename)"
    task "deploying $(package:filename) to $remote-deploy" {
        std:net:http ~method=put ~body=(fs:read package:path) $target
    }
}

doc-html = task "generating docs" {
    user-guide-dir = Path:join $script-dir user_guide
    exec ~pwd=$user-guide-dir (env:path-search mdbook) build
    book-dir = Path:join $user-guide-dir book
    std-doc-dir = Path:join $book-dir std_docs
    fs:remove $std-doc-dir
    std:Type:any :std-content = id ~eval=std:Bool:false $std
    doc:write $std-doc-dir $std-content
    fs:copy (Path:join $user-guide-dir quick_reference.html) $book-dir
    $book-dir
}

deploy-docs = task "deploying docs" <| std:sync:consume $*term* {
    deploy = exec ~retain-terminal rsync -avz --delete "$doc-html/" $remote-docs
    [io:stdout deploy:stdout, io:stderr deploy:stderr]
    ()
}

deploy-all = { [deploy $linux-package, deploy $mac-package, $deploy-docs], () }
test = { [load ergo_std/test, run-task "running tests" cargo test], () }

## Commands:
## * build - build all crates
## * test - build and run tests
## * package [linux|mac] - create packages for linux and/or mac. This requires input of the mac
## server builduser password.
## * doc - generate documentation
## * deploy [docs|linux|mac] - build documentation and packages for linux and mac, and deploy to
## artifactory. This requires access to the hosting platforms and input of the mac server builduser
## password.
command = match:value [
    fn build -> run-task "compiling all projects" cargo build
    fn test -> $test
    fn deploy -> $deploy-all
    fn deploy docs -> $deploy-docs
    fn deploy linux -> deploy $linux-package
    fn deploy mac -> deploy $mac-package
    fn package -> [$linux-package,$mac-package]
    fn package linux -> $linux-package
    fn package mac -> $mac-package
    fn doc -> $doc-html
]
