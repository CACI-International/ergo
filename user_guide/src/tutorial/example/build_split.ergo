#!/usr/bin/env ergo

std:import {:cache, :env, :exec, :fs, :source, :task, :Array, :Iter, :Path} = $std

# Convenience bindings for the following functions
run-with-path = fn ^:args -> {exec ~env={PATH = env:vars:PATH} ^$args; ()}
copy-out = fn :file :name -> fs:copy $file <| Path:join (source:dir ()) $name

## Compile function, taking one argument indicating the file to compile.
compile = fn :source-file -> cache <| Path:for <| fn :out -> {
    task "compiling $source-file" (
        run-with-path c++ -o $out -c (fs:track $source-file)
    )
}

## Linking function, which passes all arguments to the linker.
link = fn :name ^:args -> cache <| Path:for <| fn :out -> {
    task "linking $name" <| run-with-path c++ -o $out ^$args
}

## Executable-linking function, which links all arguments.
link-exe = $link

## Library-linking function, which links all arguments as a shared library.
link-so = fn :name ^:args -> link $name -shared ^$args


# Create a library from lib.cpp.
lib = link-so "add2 library" "-Wl,-hlibadd2.so" (compile lib.cpp) 

# Create an executable using the library.
exe = link-exe forty_two (compile main.cpp) $lib

# Copy results into the current directory.
[
    copy-out $exe forty_two
    copy-out $lib libadd2.so
]
()
