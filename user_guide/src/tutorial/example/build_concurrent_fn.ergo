#!/usr/bin/env ergo

std:import {:cache, :env, :exec, :fs, :source, :task, :Path} = $std

## Compile function, taking one argument indicating the file to compile.
compile = fn :source-file -> cache <| Path:for <| fn :out -> {
    task "compiling $source-file" {
        exec ~env={PATH = env:vars:PATH} c++ -o $out -c (fs:track $source-file)
        ()
    }
}

## Executable-linking function, which links all arguments.
link-exe = fn :name ^:objs -> cache <| Path:for <| fn :exe -> {
    task "linking executable $name" {
        exec ~env={PATH = env:vars:PATH} c++ -o $exe ^$objs
        ()
    }
}

# Compile main.cpp
main = compile main.cpp
# Compile lib.cpp
lib = compile lib.cpp

# Link the object files together
exe = link-exe forty_two $main $lib

# Copy to a file in the working directory.
fs:copy $exe <| Path:join (source:dir ()) forty_two
