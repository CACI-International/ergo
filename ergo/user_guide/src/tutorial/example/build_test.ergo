#!/usr/bin/env ergo

# Convenience bindings for following functions
run = fn ^{^kwargs} ^args -> exec ^:kwargs ^:args |>:complete
run-with-path = fn ^{^kwargs} ^args -> run ^{ ^:kwargs, env = { PATH = env:get PATH }} ^:args
copy-out = fn file name -> fs:copy :file (path:join :script-dir :name)

# Compile function, taking one argument indicating the file to compile,
# and a non-positional `includes` argument.
compile = fn ^{^kwargs} source-file -> {
    incs = match :kwargs {
        {includes,^_} = collection:fold (fn incs p -> [^:incs,-I,:p]) [] :includes
        _ = []
    }
    object-file = (path:new)
    value:cache <| seq ^[
        task (string:format "compiling {}" :source-file) <| run-with-path c++ -o :object-file ^:incs -c (fs:track :source-file)
        :object-file
    ]
}

# Linking function, which passes all arguments to the link command.
link = fn name ^args -> value:cache <| seq ^[
    exe = (path:new)
    task (string:format "linking {}" :name) <| run-with-path c++ -o :exe ^:args
    :exe
]

# Executable-linking function, which links all arguments.
link_exe = :link

# Library-linking function, which links all arguments.
link_so = fn name ^args -> link :name -shared ^:args


# Create a library from lib.cpp.
lib = link_so "add2 library" "-Wl,-hlibadd2.so" (compile lib.cpp) 

# Create an executable using the library.
exe = link_exe forty_two (compile main.cpp) :lib

# Download Catch2, build it and get the output include directory.
Catch2 = {
    tarball = seq (p = (path:new)) (run wget "https://github.com/catchorg/Catch2/archive/v2.11.1.tar.gz" -O :p) :p
    source = seq (p = (path:new)) (run mkdir -p :p) :p
    catch_dir = seq (run ^{pwd = :source} tar -xzf :tarball) (path:join :source Catch2-2.11.1)
    run_tests = seq ^[
        build_dir = (path:new)
        run-with-path cmake -DCMAKE_BUILD_TYPE=Release -S :catch_dir -B :build_dir
        run-with-path ^{pwd=:build_dir} make -j8
        run-with-path ^{pwd=:build_dir} make test
    ]
    # Run the test suite before returning the library path
    value:cache <| seq :run_tests (path:join :catch_dir single_include)
}

# Create lib directory to link named library for testing
libpath = {
    dir = (path:new)
    value:cache <| seq ^[
        fs:create-dir :dir
        fs:copy :lib (path:join :dir libadd2.so)
        :dir
    ]
}

# Create and run a test executable using the library.
test_prog = link_exe "test program" (compile test.cpp ^{ includes = [:Catch2] }) :lib
test = run ^{ env = { LD_LIBRARY_PATH = :libpath } } :test_prog

# Copy results into the current directory.
copy_result = [
    copy-out :exe forty_two
    copy-out :lib libadd2.so
]

# Only copy outputs if the tests pass.
seq (value:cache :test) :copy_result
