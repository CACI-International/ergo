{:Type,:trait,:match,:Array,:Bool,:Error,:Iter,:Map,:MapEntry,:String,:value,^_} = ergo plugin

## Match any value, without evaluating it.
##
## Arguments: `:target`
pass = fn :target -> :x -> { $target = $x }

## Modify a type to make it appropriate for comparison.
##
## Arguments: `(Type :type)`
##
## This will simply clear the type's associated index. This will match types returned by e.g. `get`.
basic = fn :type -> Type:modify $type {}

## Check whether a value has the given type.
##
## Arguments: `:T :value`
##
## Returns `value` (evaluated) if it is a `T`, otherwise returns an Error.
check = fn :T :value -> { T :x = $value; $x }

## Match maps with specific keys and value types.
## 
## Arguments: `(Map :map)`
##
## `map` should contain the expected keys and their corresponding value types.
##
## Returns a value that will match a Map with the given key/value types.
map-values = fn (Map :fields) -> fn :target -> Map :m -> {
    $target = Map:from <| Iter:map (fn (MapEntry:@ :k :v) -> { fields:$k :v = $v; MapEntry:new $k $v }) $m
    ()
}

## Match maps where all keys match a specific type and all values match a specific type.
## 
## Arguments: `:Keys :Values`
##
## Returns a value that will match a Map binding with the given types.
map-of = fn :Keys :Values -> fn :target -> Map :m -> {
    $target = Map:from <| Iter:map (fn (MapEntry:@ (Keys :k) (Values :v)) -> MapEntry:new $k $v) $m
    ()
}

## Match arrays with specific value types.
## 
## Arguments: `(Array :array)`
##
## `array` should contain the expected value types for each entry in the array.
##
## Returns a value that will match an Array with the given value types.
array-values = fn (Array :tps) -> fn :target -> Array :a -> {
    $target = Array:from <| Iter:map (fn [:T,:v] -> { T :v = $v; $v } ) <| Iter:zip $tps $a
    ()
}

## Match arrays where all values match a specific type.
## 
## Arguments: `:T`
##
## Returns a value that will match an Array with the given type.
array-of = fn :T -> fn :target -> Array :a -> {
    $target = Array:from <| Iter:map (fn (T :v) -> $v) $a
    ()
}

## Match one of a number of types.
##
## Arguments: `^:types`
##
## Returns a value that will match one of the provided `types`.
or = fn ^:tps -> fn :target -> :v -> {
    match $v <| value:source-copy $tps <| Array:from <| Iter:map (fn :T -> T $target -> ()) tps:positional
}

## Create an enumeration type.
## 
## Arguments: `(String :name) (Map :variants)`
## 
## Enumeration (sum) types have one of a closed set of inner types.
## The first argument should be the unique name of the type (as would be passed to `Type:new`).
## The second argument should be a map of the variant keys and expected types. For example:
## ```ergo
## MapResult = enum MapResult {
##   Ok = $$Map
##   Error = $$String
## }
## ok = MapResult:Ok {}
## err = MapResult:Error "oh no"
## MapResult :r = $$ok
## MapResult :e = $$err
## MapResult:@:Ok :m = $$ok
## ```
enum = fn (String :name) (Map :variants) -> {
    # Create new type for enum
    Self = Type:new $name
    # Create interface functions for creation and binding.
    Type:modify $Self {
        ^Map:from <| Iter:map (fn (MapEntry:@ :key :Value) -> MapEntry:new $key <| fn (Value :value) -> Self:new $key $value) $variants
        @ = Map:from <| Iter:map (fn (MapEntry:@ :key _) -> MapEntry:new $key <| fn :target -> Self:@ $key $target -> ()) $variants
    }
}

## Create a structured type.
## 
## Arguments: `(String :name) (Map :fields)`
## 
## Structured (product) types are a set of keyed values.
## Note this merely makes a new Type with a `Map:values` matcher.
## 
## The first argument should be the unique name of the type (as would be passed to `Type:new`).
## The second argument should be a map of the field keys and expected types. For example:
## ```ergo
## StringPair = struct StringPair {
##     first = $$String
##     second = $$String
## }
## pair = StringPair:new { first = hello, second = world }
## StringPair _ = :pair
## StringPair:@ {:first,:second} = :pair
## ```
struct = fn (String :name) (Map :fields) -> {
    # Create new type for struct
    Self = Type:new $name
    # Create interface functions for creation and binding.
    Type:modify $Self {
        new = fn (map-values $fields |> :entries) -> Self:new $entries
        @ = Self:@
    }
}

{pass,basic,check,map-values,map-of,array-values,array-of,or,enum,struct}
