plugin = ergo plugin

## Run a number of tests and return a string indicating results.
##
## Arguments: `Map :tests`
##
## `tests` may contain values that either evaluate to a nested `Map` of more tests (namespacing the
## tests), `Bool:true` to indicate success, `Bool:false` to indicate failure, or `Error` to indicate
## failure. The keys of the maps are used to name the tests.
run = {
    f = fn :self :name :x -> plugin:match ^allow-error :x [
        plugin:type:Map :m -> plugin:iter:flatten <| plugin:iter:map (fn (plugin:type:MapEntry:@ :k :v) -> {
            self :self (plugin:string:format "{}:{}" :name :k) :v
        }) :m
        plugin:type:Error :e -> [{ name, result = plugin:string:format "\u{1b}[31mfailed with error:\u{1b}[m {}" <| plugin:error:display :e }]
        plugin:bool:true -> [{ name, result = "\u{1b}[32msuccess\u{1b}[m" }]
        plugin:bool:false -> [{ name, result = "\u{1b}[31mfailed\u{1b}[m" }]
        _ -> plugin:type:Error:@ (source=:x) "\u{1b}[1;31minvalid test result\u{1b}[m"
    ]

    print-result = fn {name, result} -> plugin:string:format "{} ... {}" :name :result

    fn (plugin:type:Map :tests) -> {
        :results = plugin:iter:flatten <| plugin:iter:map (fn :e -> f :f (plugin:string:format "{}" e:key) e:value) :tests
        plugin:string:join "\n" <| plugin:iter:map :print-result :results
    }
}

{ run }
