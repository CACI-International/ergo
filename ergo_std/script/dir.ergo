plugin = !id <| ergo plugin

## Create a value that will evaluate to the first argument which successfully binds.
## 
## Arguments: `(Array :cases)`
##
## This is a shortcut for `:a -> match $$a $$cases`.
matches = fn :cases -> :a -> plugin:match $a $cases

mcache = ergo cache
mdoc = ergo doc
mnet = ergo net
mpath = ergo path
mtest = ergo test
mtype = ergo type

## Load a remote archive.
##
## Fetches the archive with `net:unarchive ~enter`, and loads the archive from the root directory.
## Caches the returned value using `std:cache`.
##
## All arguments are forwarded to `std:net:http`.
ergo-remote = fn ^:args -> ergo <| mcache:cache <| mnet:unarchive ~enter ^$args

## Return any bound value as-is.
##
## Particularly useful as a case in `match` calls.
pass = :v -> $v

## Use a default value if Unset.
##
## Arguments: `:target as :value`
##
## If the value bound to the result is `Unset`, `value` is used instead.
##
## ### Example Usage
## ```ergo
## default :my-value as [] = $$maybe-an-array
## func = fn (opt-arg = default :arg as []) -> {...}
## ```
default = fn :target as :default-value -> :v -> {
    $target =  plugin:match $v [$unset -> $default-value, $pass]
}

## Partially apply a function.
##
## Arguments: `(Function :func) ^:args`
##
## Returns a `Function` that, when called, will call the original function with the original arguments
## and any extra arguments of the call.
##
## ### Example Usage
## ```ergo
## f = fn :a :b :c -> [$$a,$$b,$$c]
## part = Function:partial $$f 1 2
## [1,2,3] = part 3
## [1,2,a] = part a
## ```
partial = fn :f ^:args -> fn ^:args2 -> f ^$args ^$args2

## Create a recursive value.
##
## Arguments: `:generator`
##
## Returns the result of binding `generator` with the result of the binding.
##
## *Avoid recursion when possible*, as it is often difficult to reason about value identities and
## behavior in the lazily-evaluated runtime. Functional recursion avoids deadlock detection, so
## be careful to call in a terminating manner!
##
## ### Example Usage
## ```ergo
## Map :m = recurse <| :self -> {
##     x = fn :a -> self:y $$a
##     y = fn :b -> [$$b, 1]
## }
##
## Function :f = recurse <| :self -> fn :v -> {
##     match $$v [
##         String :s -> $$s
##         [:a,^:rest] -> self $$a
##     ]
## }
## ```
recurse = fn :f -> (fn :l -> l $l) (fn :l -> bind $f (l $l))

## Memoize a function (cache the function results based purely on arguments).
##
## Arguments: `(Function :f)`
##
## Returns a function which will share results based on the arguments. Thus, if you call the
## function more than once on the same arguments, it will only be evaluated once with those
## arguments.
memoize = fn (plugin:Function :f) -> fn ^:args -> mcache:once <| f ^$args

## Match a value allowing `Unset` values.
##
## Arguments: `:target`
##
## This will first evaluate the value before checking for Unset.
optional = fn :target -> :v -> plugin:match $v [
    $unset -> ()
    _ -> { $target = $v }
]

## Match a value disallowing `Unset` values.
##
## This is only useful if the binding argument would normally accept an `Unset` value.
##
## Arguments: `:target`
##
## This will first evaluate the value before checking for Unset.
required = fn :target -> :v -> plugin:match $v [
    $unset -> plugin:Error:new (source=$v) "required value missing"
    _ -> { $target = $v }
]

## Match optional arguments.
##
## Arguments: `^:target` -> `^:args`
##
## Normally positional arguments will result in an error if missing; this function allows binding of
## optional positional arguments. If an optional argument is missing, it will be explicitly bound
## with `unset` (allowing the use of e.g. `default`).
##
## ### Example
## ```
## f = fn :a :b ^(optargs :c :d) -> {}
## f 1 # Errors
## f 1 2 # Succeeds
## f 1 2 3 # Succeeds
## f 1 2 3 4 # Succeeds
## f 1 2 3 4 5 # Errors
## ```
optargs = fn ^:target -> fn ^:args -> {
    # Directly bind keyed arguments; they already handle missing arguments as expected.
    target:keyed = args:keyed
    args-n = plugin:Iter:count args:positional
    target-n = plugin:Iter:count target:positional
    plugin:match (plugin:Number:compare $args-n $target-n) [
        plugin:Order:less -> {
            plugin:Iter:zip ~all target:positional args:positional | plugin:Iter:map (fn [:a,:b] -> { $a = $b })
        }
        # Use normal binding error that will result if there are too many args.
        _ -> { target:positional = args:positional }
    ]
    ()
}

## Import values by index in a binding expression.
##
## Arguments: `:descriptor`
##
## If passed a Map, each key in the map will be used as an index to the bound value, and each value
## will be bound as if `import` were used.
## Otherwise, bind the result to the binding expression.
##
## Note that if any indexed values produce `Unset` or an `Error`, an `Error` will occur.
##
## ### Example Usage
## ```ergo
## # Basic import (no different than normal binding)
## import :s = $$std
##
## # Name import
## import {fs = {:write},:io} = $$std
## write file.txt io:stdin
##
## # Renaming import
## import {path = :stdpath} = $$std
## stdpath:from my/path
## ```
import = recurse <| :self -> fn :descr -> :v -> {
    plugin:match $descr [
        plugin:Map :m -> {
            plugin:Iter:map (fn (plugin:MapEntry:@ :key :value) -> { 
                plugin:value:index { :$key = :result } = $v
                plugin:match (plugin:value:equal ~exact $result $unset) [
                    plugin:Bool:true -> plugin:Error:new (source=$key) "missing index"
                    _ -> ()
                ]
                self $value = $result
                ()
            }) $m
            ()
        }
        :other -> { $other = $v; () }
    ]
}

## Check whether a path exists.
##
## Arguments: `(Path :path)`
##
## Returns a `Bool` indicating whether the path exists and is accessible to the user.
file-exists = fn :p -> plugin:Bool:from <| plugin:fs:file-type $p

## Create a function that also behaves as a module (with indices).
##
## Arguments: `(Function :function) (Map :module)`
##
## This will also appropriately set the documentation of the value based on the documentation of the
## arguments.
function-module = fn (plugin:Function :func) :module -> {
    mod-doc = plugin:match $module [
        {} -> ""
        _ -> {
            ##mdoc:module
            ##
            module
            "\n\n$(doc $module)"
        }
    ]

    ## $(doc $func)$mod-doc
    :a -> {
        { :result } = plugin:match $a [
            index :i -> plugin:match module:$i [
                $unset -> plugin:Error:new (source = $module) "missing index: $i"
                :x -> { result = $x }
            ]
            # We want the binding to occur immediately, but if there is an error we do not want to make
            # `match` consider it a match error and move on (to improve the overall error reported in
            # this case).
            :other -> { result = bind $func $other }
        ]
        $result
    }
}

## Split an iterator after the first `n` elements.
##
## Arguments: `(String :n) (Into<Iter> :iter)`
##
## Returns a 2-value array where the first value is an Iter with the first `n` values, and the
## second is an Iter with all remaining values.
iter-split = fn :n :iter -> [plugin:Iter:take $n $iter, plugin:Iter:skip $n $iter]

## Filter an iterator to values that convert to `Bool:true`.
##
## Arguments: `(into $$Iter |> :iter)`
iter-true = fn :iter -> plugin:Iter:filter (fn :a -> $a) $iter

## Conditionally return a value.
##
## Arguments: `(Into Bool |> :condition) :if_true [else if :cond2 :if_true2]... [else :if_false]`
##
## If `condition` evaluates to true, `if_true` is returned. Otherwise each following `cond2` is
## subsequently tested (returning `if_true2` if one evaulates to true), and `if_false` is returned
## if no conditions evaluate to true. If the else condition is omitted, `unset` will be returned.
if = fn :cond :if_true ^:rest -> {
    do-condition = recurse <| :self -> fn :cond :if_true :rest -> {
        plugin:match (plugin:Bool:from $cond) [
            plugin:Bool:true -> $if_true
            plugin:Bool:false -> plugin:match $rest [
                [else,if,:cond2,:if_true2,^:rest] -> self $cond2 $if_true2 $rest
                [else,:if_false] -> $if_false
                [] -> $unset
                [:other,^_] -> plugin:Error:new (source=$other) "expected `else` or `else if`"
            ]
        ]
    }
    do-condition $cond $if_true (plugin:Array:from <| $rest)
}

## Create a function which takes only string arguments as interpreted by `std:getopt`.
##
## Arguments: `^:args`
##
## Passes all positional arguments to `std:getopt` and binds the result to the pattern arguments.
getopt-fn = :patargs -> :args -> { $patargs = plugin:getopt args:positional }

## Map a possibly-Unset value.
##
## Arguments: `(Function :f) :value`
##
## If `value` is Unset, returns `value` (unset), otherwise returns `f` applied to `value`.
unset-map = fn :f :v -> plugin:match $v [$unset -> $v, _ -> f $v]

## Return the first non-Unset value.
##
## Arguments: `^:values`
##
## If none of the `values` are not Unset, returns Unset.
unset-or = fn ^:values -> {
    result = (plugin:Array:from $values
        | plugin:Iter:skip-while (fn :v -> plugin:value:equal $v $unset)
        | plugin:Iter:item)
    unset-map (fn :m -> m:item) $result
}

## Bind a value to each binding provided.
##
## Arguments: `^:cases`
##
## When bound with a value `v`, binds each value in `cases` with `v`, failing if any encounter an
## error.
bind-and = fn ^:cases -> :v -> {
    plugin:Iter:map (fn :case -> { $case = $v }) cases:positional
    ()
}

## Bind a value to at least one of the bindings provided.
##
## Arguments: `^:cases`
##
## When bound with a value `v`, binds each value in `cases` with `v` until one does not error, and
## produces an error if none match.
bind-or = fn ^:cases -> :v -> plugin:match $v cases:positional

## Extend a type with the given map of indices.
extend-type = fn :tp :map -> plugin:Type:modify $tp <| plugin:value:merge (plugin:Type:index $tp) $map

## Evaluate a value and all inner values with the given dynamic bindings.
##
## Arguments: `(Map :bindings) :value`
##
## Returns the result of evaluating `value` with all `bindings` set in the dynamic scope, and sets
## those bindings on any values within `value` (through the `Functor` trait).
##
## It is often preferable to use this function over `std:dynamic:eval`, especially when a value may
## have arbitrary type and nested values which may possibly interact with dynamic bindings.
dynamic-bind = fn :bindings :value -> {
    apply = recurse <| :self -> :value -> {
        result = plugin:value:dynamic:eval $bindings $value
        plugin:trait:Functor:map $self $result
    }
    bind $apply $value
}

##mdoc:module
## The ergo standard library.
##
## This library provides a number of submodules that group related functions, as well as some
## top-level functions. It is often useful to use `std:import` to import subsets of functionality
## from the library.
{
    ##mdoc:module
    ## Arrays of values.
    Array = extend-type plugin:Array {
        values = mtype:array-values
        of = mtype:array-of
    }

    ##mdoc:module
    ## Boolean values.
    Bool = plugin:Bool

    ##mdoc:module
    ## Caches of values.
    Cache = plugin:Cache

    ##mdoc:module
    ## Runtime errors.
    Error = plugin:Error

    ##mdoc:module
    ## Functions and unbound values.
    Function = extend-type plugin:Function {memoize,partial,pass,module = $function-module}

    ##mdoc:module
    ## Iterators producing values.
    Iter = extend-type plugin:Iter {split = $iter-split, true = $iter-true}

    ##mdoc:module
    ## Maps of values.
    Map = extend-type plugin:Map {
        values = mtype:map-values
        of = mtype:map-of
    }

    ##mdoc:module
    ## A single entry for a Map.
    MapEntry = plugin:MapEntry

    ##mdoc:module
    ## Arbitrary rational numbers.
    Number = plugin:Number

    ##mdoc:module
    ## Ordering values.
    Order = plugin:Order

    ##mdoc:module
    ## File paths.
    Path = extend-type plugin:Path $mpath

    ##mdoc:module
    ## Strings.
    String = plugin:String

    ##mdoc:module
    ## The Type of Types.
    Type = extend-type plugin:Type {
        import {:check,:enum,:struct,:pass,:or} = $mtype
    }

    ##mdoc:module
    ## Unit (void) type.
    Unit = plugin:Unit

    ##mdoc:module
    ## Unset type.
    Unset = extend-type plugin:Unset {map = $unset-map, or = $unset-or}

    ##mdoc:module
    ## Binding helpers.
    bind = {
        and = $bind-and
        or = $bind-or
    }

    ##mdoc:module
    ## Documentation helpers.
    doc = $mdoc

    ##mdoc:module
    ## Interact with dynamic bindings.
    ##
    ## A dynamic binding is a binding that has dynamic scope, meaning that it is retrieved at
    ## evaluation time, and is still bound through function calls and other evaluation. This can be
    ## used, for example, to set global context that will be used.
    ##
    ## Generally dynamic bindings are a bit tricky to reason about since there are no syntactic
    ## hints about when they will be present, so take this into consideration when using them.
    dynamic = { ^plugin:value:dynamic, bind = $dynamic-bind }

    ##mdoc:module
    ## Get values related to the program's runtime environment.
    env = plugin:env

    ##mdoc:module
    ## Interact with the local filesystem.
    fs = { ^plugin:fs, exists = $file-exists }

    ##mdoc:module
    ## Interact with the program's io channels.
    io = plugin:io

    ##mdoc:module
    ## JSON functions.
    ##
    ## JSON types map to native ergo types in the following way:
    ## * null <-> `Unit`
    ## * string <-> `String`
    ## * number <-> `Number`
    ## * boolean <-> `Bool`
    ## * object <-> `Map`
    ## * array <-> `Array`
    json = plugin:json

    ## The runtime logging interface.
    ##
    ## Loggers support the following indices:
    ## * `debug`/`info`/`warn`/`error` - Display the argument at the given log level.
    ## * `sublog` - Create a new sublogger from this logger, with the given name argument.
    log = plugin:log

    ##mdoc:module
    ## Manipulate value metadata.
    ##
    ## Values can have arbitrary metadata attached to them at runtime. This metadata can be
    ## retrieved without evaluating the value.
    meta = plugin:value:meta

    ##mdoc:module
    ## Networking functions.
    net = $mnet

    ##mdoc:module
    ## Value source location functions.
    source = {
        copy = plugin:value:source-copy
        ## Get the source directory of a value.
        ##
        ## Arguments: `:value`
        ##
        ## Returns the parent directory of the source path of `value`, or Unset if no source path is
        ## available.
        dir = fn :x -> unset-map plugin:Path:parent <| plugin:value:source-path $x
        path = plugin:value:source-path
        ## Map a function on a value, retaining the value's source.
        ##
        ## Arguments: `(Function :f) :value`
        map = fn :f :v -> plugin:value:source-copy $v (f $v)
    }

    ##mdoc:module
    ## Synchronization functions.
    sync = plugin:sync

    ##mdoc:module
    ## Test helper functions.
    test = $mtest

    ##mdoc:module
    ## Trait manipulation functions.
    trait = {
        new = plugin:trait:new

        ##mdoc:module
        ## The Bind trait.
        Bind = plugin:trait:Bind

        ##mdoc:module
        ## The Display trait.
        Display = plugin:trait:Display

        ##mdoc:module
        ## The Into trait.
        Into = plugin:trait:Into

        ##mdoc:module
        ## The Stored trait.
        Stored = plugin:trait:Stored
    }

    # Functions
    import {:debug,:equal,:identity,:index,:merge,:variable} = plugin:value
    import {:cache,:once} = $mcache
    default, optional, required, optargs
    ergo-remote
    exec = plugin:exec
    getopt = function-module plugin:getopt {fn = $getopt-fn}
    import
    if
    recurse
    match = function-module plugin:match {value = $matches}
    task = plugin:task
}
