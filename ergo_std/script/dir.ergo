plugin = ergo plugin

## Create a value that will evaluate to the first argument which successfully binds.
## 
## Arguments: <binding cases>...
## This is a shortcut for `:a -> match :a <cases>`.
matches = fn ^:cases -> :a -> !plugin:match :a ^:cases

net = ergo net
type = ergo type

## Load a remote archive.
##
## Fetches the archive with `net:unarchive-remote`, and loads the archive from the root directory.
##
## Arguments: (String url)
ergo-remote = fn :url -> ergo <| net:unarchive-remote :url

## Return any bound value as-is.
##
## Particularly useful as a case in `match` calls.
pass = :v -> :v

## Default a value in a binding expression.
##
## Arguments: <target> as <value>
##
## Ensure that `<value>` is evaluated as a normal expression (typically preceded by `!`, though not
## always necessary if the value doesn't use get/set syntax).
##
## If the value bound to the result is `Unset`, the default is used.
##
## ## Example
## ```
## default :my-value as [] = :maybe-an-array
## ```
default = pat :out as :default-value -> :v -> {
    !:out = !plugin:match :v (plugin:type:Unset -> :default-value) (:other -> :other)
}

## Run a command that produces an output path, where the path to create is passed as an argument to
## the given function.
##
## Arguments: <function>
##
## Returns the output path, relying on the value returned by the function. Execution of that value
## _must_ make the path valid for future use.
with-output-path = fn :f -> {
    file = plugin:path:new:
    seq (f :file) :file
}

## Create a recursive function. The passed function will be passed itself as the first argument, and
## all other arguments will be forwarded.
##
## Arguments: <function>
##
## Returns a function that calls the passed function, forwarding arguments.
##
## When recursively calling the function, you must also pass the function as the first argument.
## *Avoid recursion when possible*, as it is often difficult to reason about value identities and
## behavior in the lazily-evaluated runtime.
recursive = fn :f -> fn ^:args ^{^:kwargs} -> f :f ^:args ^:kwargs

## Import values by index in a binding expression.
##
## Arguments: <Map or binding>
##
## If passed a map, each key in the map will be used as an index to the bound value, and each value
## will be bound as if `import` were used.
## Otherwise, bind the result to the binding expression.
import = {
    inner = recursive <| fn :self :descr -> :v -> {
        !match :descr {
            plugin:type:Map :m -> plugin:collection:entries :m | plugin:collection:map (fn {key,value} -> { type:Required !(self :self :value) = v::key; () })
            :other -> { !:other = :v; () }
        }
    }

    pat :descr -> inner :descr
}

copydoc = matches ^[
    fn :a :b -> plugin:value:doc:set :b (plugin:value:doc:get :a)
    fn :a merge :b -> plugin:value:doc:set :b (plugin:string:format "{}\n{}" (plugin:value:doc:get :a) (plugin:value:doc:get :b))
]

extend-index = fn :a :b -> {
    doc = plugin:string:format "{}\n{}" (plugin:value:doc:get :a) (plugin:value:doc:get :b)
    require-b = pat :out -> index :i -> { type:Required !:out = b::i }
    plugin:value:doc:set (!plugin:match :a ^[
        plugin:type:Map :m -> {^:m,^:b}
        :other -> matches (require-b :v -> :v) :other
    ]) :doc
}

doc-summary = fn :val -> (plugin:string:split "\n\n" (doc :val)):0

doc-module = fn :self :name -> {
    first = !plugin:match doc:path: ^[
        plugin:type:Unset -> :name
        _ -> plugin:string:format "[{}]({})" :name (doc:write :name self::name)
    ]
    plugin:string:format "* {}: {}\n" :first (doc-summary self::name)
}

doc-modules = fn :self ^:names -> {
    !plugin:collection:fold (fn :s :n -> plugin:string:format "{}{}" :s (doc-module :self :n)) "" :names
}

doc-function = fn :self :name -> {
    !plugin:match doc:path: ^[
        plugin:type:Unset -> plugin:string:format "* {}: {}\n" :name (doc-summary self::name)
        _ -> plugin:string:format "## {}\n{}\n\n" :name (doc self::name)
    ]
}

doc-functions = fn :self ^:names -> {
    !plugin:collection:fold (fn :s :n -> plugin:string:format "{}{}" :s (doc-function :self :n)) "" :names
}

## The ergo standard library.
##
## This library provides a number of submodules that group related functions, as well as a few
## top-level functions. It is often useful to merge the library into the top-level environment,
## for instance with `^ergo std`.
##
## # Modules
## {{doc-modules :self collection env error fs io net path script string type value}}
##
## # Functions
## {{doc-functions :self default ergo-remote exec import log match pass recursive seq task}}
{
    ^:plugin
    type = extend-index plugin:type {
        ## * enum: Create an enumerated type.
        ## * struct: Create a structured type.
        ## * MapValues: Match a map with specific value types.
        ## * MapOf: Match a map with single key and value types.
        ## * ArrayValues: Match an array with specific value types.
        ## * ArrayOf: Match an array of a single type.
        ## * Optional: Match an inner value or `Unset` types.
        ## * Required: Match an inner value, disallowing `Unset` types.
        :type
    }
    net = extend-index plugin:net {
        ## * unarchive-remote: Open a remote archive.
        :net
    }
    match = extend-index plugin:match {
        ## ## Indices
        ## * value: Create a value that matches against a binding.
        { value = :matches }
    }
    path = extend-index plugin:path {
        ## * with-output: Run a command which creates an output Path.
        { with-output = :with-output-path }
    }
    ergo-remote
    pass
    default
    recursive
    import
}
