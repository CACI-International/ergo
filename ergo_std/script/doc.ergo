plugin = ergo plugin

string-summary = fn :s -> (plugin:String:split "\n\n" $s):0

## Get the summary documentation of a value.
##
## Arguments: `:value`
##
## The summary documentation is the first paragraph of documentation (where paragraphs are separated
## by two newlines).
summary = fn :val -> string-summary <| doc $val

## Convert a string to one that is safe for use as a path component (e.g. replacing `/` characters).
path-safe = fn :v -> {
    plugin:String:join __slash__ <| plugin:String:split / $v
}

## The key used for doc categories.
category-key = "std:doc:category"

## An attribute that sets the doc category of attributed values to the given type.
##
## Arguments: `:type`
set-category = fn :category -> :v -> plugin:value:meta:set $category-key $category $v

## An attribute to document a value under the `Values` heading.
value = set-category Values

## An attribute to document a value under the `Functions` heading.
function = set-category Functions

## An attribute to document a value under the `Types` heading.
type = set-category Types

## An attribute to ignore a value when generating documentation.
ignore = set-category Ignored

## An attribute to document a module's contents.
##
## This will document the value under the `Modules` heading if a Map, or the `Type` heading if it is
## a Type (in which case the Type's index is documented).
##
## The value's contents can optionally use the various attributes in `std:doc` to indicate which headings
## they belong under. If no attributes are used:
## * Types are placed under the `Types` heading,
## * Functions are placed under the `Functions` heading, and
## * all other values are placed under the `Values` heading.
##
## Note that if a value isn't explicitly attributed, it will be evaluated when determining placement
## (so be mindful if values produce side effects).
module = :val -> {
    docs = doc $val
    {:indices,:category} = plugin:match $val [
        plugin:Map :m -> {indices = $m, category = Modules}
        plugin:Type :t -> {indices = plugin:Type:index $t, category = Types}
    ]

    all-docs = {
        sections = plugin:Iter:fold (fn :categories :e -> {
            # Partition contents based on category.
            # First check for the explicit metadata
            { result = :v, metadata-value = (? :meta) } = plugin:value:meta:eval $category-key e:value
            plugin:String :category = plugin:match $meta [
                # Use the value type to determine the category
                $unset -> plugin:match $v [
                    plugin:Function _ -> Functions
                    plugin:Type _ -> Types
                    _ -> Values
                ]
                :c -> $c
            ]
            plugin:value:merge $categories { :$category = [{name = e:key, value = $v}] }
        }) {} $indices

        # Format section headers and sorted contents, sorting sections explicitly for
        # Types/Modules/Functions/Values and then lexicographically, dropping the Ignored values.
        { :Types, :Modules, :Functions, :Values, Ignored = _, ^:extra-sections } = $sections

        make-section = fn :section-name :values -> {
            values = ($values
                | plugin:Iter:order (fn :a :b -> plugin:String:compare a:name b:name)
                | plugin:Iter:map (fn :e -> {
                    plugin:match (doc:path()) [
                        $unset -> "* $(e:name): $(summary e:value)"
                        _ -> {
                            child = doc:child (path-safe e:name) e:value
                            url-path = plugin:Path:join ^<|plugin:Array:from <| plugin:Iter:map plugin:net:url-encode <| plugin:Path:split child:path
                            "* [$(e:name)]($url-path): $(string-summary child:content)"
                        }
                    ]
                })
                | plugin:String:join "\n"
                )
            "## $section-name\n$values"
        }

        maybe-section = fn :name :v -> plugin:match $v [$unset -> "", :v -> make-section $name $v]
        Types = maybe-section Types $Types
        Modules = maybe-section Modules $Modules
        Functions = maybe-section Functions $Functions
        Values = maybe-section Values $Values

        extras = ($extra-sections
            | plugin:Iter:order (fn :a :b -> plugin:String:compare a:key b:key)
            | plugin:Iter:map (fn :e -> make-section e:key e:value)
            )

        initial-sections = plugin:Iter:filter (fn :v -> plugin:match $v [
            "" -> plugin:Bool:false
            _ -> plugin:Bool:true
        ]) [$docs,$Types,$Modules,$Functions,$Values]

        plugin:String:join "\n\n" <| plugin:Iter:flatten [$initial-sections,$extras]
    }

    ##(set-category $category)
    ## $all-docs
    $val
}

{summary, set-category, value, function, type, ignore, module}
