type = {
    enum = {
        MapResult = std:type:enum MapResult {
            Ok = std:Map
            Error = std:String
        }

        ok = MapResult:Ok {}
        err = MapResult:Error "oh no"
        std:debug :MapResult:Ok
        std:debug :ok
        !:MapResult = :ok
        !:MapResult = :err
        MapResult _ = :ok
        MapResult:Ok {} = :ok
        MapResult:Error "oh no" = :err
        std:Bool:true
    }

    struct = {
        StringPair = std:type:struct StringPair {
            first = std:String
            second = std:String
        }
        pair = StringPair:@ { first = hello, second = world }
        StringPair _ = :pair
        StringPair:@ {first = hello, second = world} = :pair
        std:Bool:true
    }

    Any = {
        std:Any _ = a
        std:Any _ = std:Error:@ a
        std:Any = a
        a = std:Any a
        std:Bool:true
    }
}

eval = {
    function = {
        std:String hi = std:eval { "hi" }
        std:Bool:true
    }
    pattern = {
        std:eval hi = { "hi" }
        std:Bool:true
    }
    error = {
        std:Error _ = std:eval <| std:Error:@ "oh no"
        std:Bool:true
    }
}

required = {
    exists = {
        std:required _ = hi
        std:Bool:true
    }
    missing = {
        std:Error _ = { std:required _ = :unset }
        std:Bool:true
    }
}

if = {
    :"one case" = {
        true = {
            std:String "yep" = std:if std:Bool:true yep
            std:Bool:true
        }
        false = {
            std:Unset _ = std:if std:Bool:false yep
            std:Bool:true
        }
    }
    else = {
        std:String "nope" = std:if std:Bool:false yep else nope
        std:Bool:true
    }
    :"else if" = {
        std:String "second" = std:if std:Bool:false first else if std:Bool:true second
        std:Bool:true
    }
    :"many else if" = {
        std:String "third" = std:if std:Bool:false first else if std:Bool:false second else if std:Bool:true third
        std:Bool:true
    }
    :"else if unset" = {
        std:Unset _ = std:if std:Bool:false first else if std:Bool:false second else if std:Bool:false third
        std:Bool:true
    }
    :"else if else" = {
        std:String "nope" = std:if std:Bool:false first else if std:Bool:false second else if std:Bool:false third else nope
        std:Bool:true
    }
    invalid = {
        std:Error _ = std:if std:Bool:false a elif b
        std:Error _ = std:if std:Bool:false a else if a
        std:Error _ = std:if std:Bool:false a b
        std:Bool:true
    }
}

std:test:run { if, type, eval, required }
